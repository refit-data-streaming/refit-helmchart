apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-flink-taskmanager
  labels:
    app: {{ .Release.Name }}-flink
    meta.helm.sh/release-name: "{{ .Release.Name }}"
    meta.helm.sh/release-namespace: "{{ .Release.Namespace }}"
  annotations:
    meta.helm.sh/release-name: "{{ .Release.Name }}"
    meta.helm.sh/release-namespace: "{{ .Release.Namespace }}"
spec:
  replicas: {{ .Values.flink.taskManager.replicas }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-flink
      component: {{ .Release.Name }}-flink-taskmanager
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-flink
        component: {{ .Release.Name }}-flink-taskmanager
    spec:
      containers:
      - name: {{ .Release.Name }}-flink-taskmanager
        image: cdliotprototype/cdl-refit-flink:{{ .Values.refit.version }}
        resources: 
          limits: 
            memory: {{ .Values.flink.taskManager.limits.memory }}
          requests: 
            memory: {{ .Values.flink.taskManager.requests.memory }}
        workingDir: /opt/flink
        command: ["/bin/bash", "-c", "$FLINK_HOME/bin/taskmanager.sh start; \
          while :;
          do
            if [[ -f $(find log -name '*taskmanager*.log' -print -quit) ]];
              then tail -f -n +1 log/*taskmanager*.log;
            fi;
          done"]
        ports:
        - containerPort: 6122
          name: rpc
        livenessProbe:
          tcpSocket:
            port: 6122
          initialDelaySeconds: 30
          periodSeconds: 60
        volumeMounts:
        - name: {{ .Release.Name }}-flink-config-volume
          mountPath: /opt/flink/conf/
        securityContext:
          runAsUser: 9999  # refers to user _flink_ from official flink image, change if necessary
        env: 
        - name: PROJECT
          value: inference
        - name: KAFKA_HOST
          value: refit-kafka:9092
        - name: KAFKA_DATA_TOPIC
          value: refit.inference.data
        - name: KAFKA_MODELS_TOPIC 
          value: refit.training.models
        - name: KAFKA_PREDICTIONS_TOPIC 
          value: refit.inference.predictions
        - name: KAFKA_IMPORT_TOPIC 
          value: refit.training.import
        - name: KAFKA_RAW_SENSOR_DATA_TOPIC 
          value: refit.inference.raw.data
        - name: KAFKA_SENSOR_DATA_TOPIC 
          value: refit.inference.sensor.data
        - name: KAFKA_MODEL_PUBLISHED_TOPIC 
          value: refit.training.models
        - name: MINIO_HOST
          value: http://{{ .Release.Name }}-minio:9000
        - name: MINIO_BUCKET_IMPORT
          value: refit-import
        - name: MINIO_BUCKET_MODELS
          value: refit-models
        - name: MINIO_BUCKET_SCHEMA
          value: refit-schema
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: accesskey
              name: {{ .Release.Name }}-minio
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: secretkey
              name: {{ .Release.Name }}-minio
      volumes:
      - name: {{ .Release.Name }}-flink-config-volume
        configMap:
          name: {{ .Release.Name }}-flink-config
          items:
          - key: flink-conf.yaml
            path: flink-conf.yaml
          - key: log4j.properties
            path: log4j.properties
      {{- with .Values.flink.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}